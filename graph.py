# from email.policy import default
# import heapq
import leetcode
# from typing import List
# import collections

# class Solution:
#     def cutOffTree(self, forest: List[List[int]]) -> int:
#         """
#         砍树。
#         0表示障碍，不可到达；1表示空格子可以走；> 1表示有棵树，且数字是树高。
#         要求从低到高砍树，返回需要多少步。
#         输入约束：没有2颗树等高
#         """
#         R, C = len(forest), len(forest[0])
#         # for _ in forest:
#         #     print(" ".join("%5d" %x for x in _))
#         #     print()
#         # 395 -> 899:

#         def bfs(sr, sc, tr, tc) -> int:
#             processed = set()
#             deque = collections.deque([(0, sr, sc)])
#             while deque:
#                 detours, r, c = deque.popleft()
#                 if (r, c) not in processed:
#                     processed.add((r, c))
#                     if r == tr and c == tc:
#                         return abs(sr-tr) + abs(sc-tc) + 2*detours
#                     for nr, nc, closer in ((r-1, c, r > tr), (r+1, c, r < tr),
#                                         (r, c-1, c > tc), (r, c+1, c < tc)):
#                         if 0 <= nr < R and 0 <= nc < C and forest[nr][nc]:
#                             if closer:
#                                 deque.appendleft((detours, nr, nc))
#                             else:
#                                 deque.append((detours+1, nr, nc))
#             return -1

#         def bfs2(sr, sc, dr, dc) -> int:
#             q = [(0, sr, sc)]
#             cost_d = {(sr, sc): 0}

#             while q:
#                 _, r, c = heapq.heappop(q)
#                 # print(r, c, forest[r][c])
#                 if r == dr and c == dc:

#                     # for i in range(R):
#                     #     print(" ".join("%5d" % cost_d.get((i, j), -1) for j in range(C)))
#                     #     print()

#                     return cost_d[r, c]

#                 for r1, c1 in ((r + 1, c), (r - 1, c), (r, c + 1), (r, c - 1)):
#                     if 0 <= r1 < R and 0 <= c1 < C and forest[r1][c1] > 0:
#                         new_cost = cost_d[r, c] + 1
#                         if (r1, c1) not in cost_d or cost_d[r1, c1] > new_cost:
#                         # if (r1, c1) not in cost_d:
#                             cost_d[r1, c1] = new_cost
#                             priority = new_cost + abs(r1 - dr) + abs(c1 - dc)
#                             heapq.heappush(q, (priority, r1, c1))
#             return -1

#         trees = sorted((h, r, c) for r, row in enumerate(forest) for c, h in enumerate(row) if h > 1)
#         sr, sc, res = 0, 0, 0
#         for _, dr, dc in trees:
#             dist = bfs(sr, sc, dr, dc)
#             if dist >= 0:
#                 res += dist
#                 # print(sr, sc, dr, dc)
#                 # print(f"{forest[sr][sc]} -> {forest[dr][dc]}: {dist}")
#                 sr, sc = dr, dc
#             else:
#                 return -1
#         return res

# f = Solution().cutOffTree
# import time
# t0 = time.time()
# for i in range(3):
#     print(f([[3597103,3,5,7,9,11,13,15,17,19,21,23,25,27,29,31,33,35,37,39,41,43,45,47,49,51,53,55,57,59,61,63,65,67,69,71,73,75,77,79,81,83,85,87,89,91,93,95,97,99],[101,103,105,107,109,111,113,115,117,119,121,123,125,127,129,131,133,135,137,139,141,143,145,147,149,151,153,155,157,159,161,163,165,167,169,171,173,175,177,179,181,183,185,187,189,191,193,195,197,199],[201,203,205,207,209,211,213,215,217,219,221,223,225,227,229,231,233,235,237,239,241,243,245,247,249,251,253,255,257,259,261,263,265,267,269,271,273,275,277,279,281,283,285,287,289,291,293,295,297,299],[301,303,305,307,309,311,313,315,317,319,321,323,325,327,329,331,333,335,337,339,341,343,345,347,349,351,353,355,357,359,361,363,365,367,369,371,373,375,377,379,381,383,385,387,389,391,393,395,397,399],[401,403,405,407,409,411,413,415,417,419,421,423,425,427,429,431,433,435,437,439,441,443,445,447,449,451,453,455,457,459,461,463,465,467,469,471,473,475,477,479,481,483,485,487,489,491,493,495,497,499],[501,503,505,507,509,511,513,515,517,519,521,523,525,527,529,531,533,535,537,539,541,543,545,547,549,551,553,555,557,559,561,563,565,567,569,571,573,575,577,579,581,583,585,587,589,591,593,595,597,599],[601,603,605,607,609,611,613,615,617,619,621,623,625,627,629,631,633,635,637,639,641,643,645,647,649,651,653,655,657,659,661,663,665,667,669,671,673,675,677,679,681,683,685,687,689,691,693,695,697,699],[701,703,705,707,709,711,713,715,717,719,721,723,725,727,729,731,733,735,737,739,741,743,745,747,749,751,753,755,757,759,761,763,765,767,769,771,773,775,777,779,781,783,785,787,789,791,793,795,797,799],[801,803,805,807,809,811,813,815,817,819,821,823,825,827,829,831,833,835,837,839,841,843,845,847,849,851,853,855,857,859,861,863,865,867,869,871,873,875,877,879,881,883,885,887,889,891,893,895,897,899],[901,903,905,907,909,911,913,915,917,919,921,923,925,927,929,931,933,935,937,939,941,943,945,947,949,951,953,955,957,959,961,963,965,967,969,971,973,975,977,979,981,983,985,987,989,991,993,995,997,999],[1001,1003,1005,1007,1009,1011,1013,1015,1017,1019,1021,1023,1025,1027,1029,1031,1033,1035,1037,1039,1041,1043,1045,1047,1049,1051,1053,1055,1057,1059,1061,1063,1065,1067,1069,1071,1073,1075,1077,1079,1081,1083,1085,1087,1089,1091,1093,1095,1097,1099],[1101,1103,1105,1107,1109,1111,1113,1115,1117,1119,1121,1123,1125,1127,1129,1131,1133,1135,1137,1139,1141,1143,1145,1147,1149,1151,1153,1155,1157,1159,1161,1163,1165,1167,1169,1171,1173,1175,1177,1179,1181,1183,1185,1187,1189,1191,1193,1195,1197,1199],[1201,1203,1205,1207,1209,1211,1213,1215,1217,1219,1221,1223,1225,1227,1229,1231,1233,1235,1237,1239,1241,1243,1245,1247,1249,1251,1253,1255,1257,1259,1261,1263,1265,1267,1269,1271,1273,1275,1277,1279,1281,1283,1285,1287,1289,1291,1293,1295,1297,1299],[1301,1303,1305,1307,1309,1311,1313,1315,1317,1319,1321,1323,1325,1327,1329,1331,1333,1335,1337,1339,1341,1343,1345,1347,1349,1351,1353,1355,1357,1359,1361,1363,1365,1367,1369,1371,1373,1375,1377,1379,1381,1383,1385,1387,1389,1391,1393,1395,1397,1399],[1401,1403,1405,1407,1409,1411,1413,1415,1417,1419,1421,1423,1425,1427,1429,1431,1433,1435,1437,1439,1441,1443,1445,1447,1449,1451,1453,1455,1457,1459,1461,1463,1465,1467,1469,1471,1473,1475,1477,1479,1481,1483,1485,1487,1489,1491,1493,1495,1497,1499],[1501,1503,1505,1507,1509,1511,1513,1515,1517,1519,1521,1523,1525,1527,1529,1531,1533,1535,1537,1539,1541,1543,1545,1547,1549,1551,1553,1555,1557,1559,1561,1563,1565,1567,1569,1571,1573,1575,1577,1579,1581,1583,1585,1587,1589,1591,1593,1595,1597,1599],[1601,1603,1605,1607,1609,1611,1613,1615,1617,1619,1621,1623,1625,1627,1629,1631,1633,1635,1637,1639,1641,1643,1645,1647,1649,1651,1653,1655,1657,1659,1661,1663,1665,1667,1669,1671,1673,1675,1677,1679,1681,1683,1685,1687,1689,1691,1693,1695,1697,1699],[1701,1703,1705,1707,1709,1711,1713,1715,1717,1719,1721,1723,1725,1727,1729,1731,1733,1735,1737,1739,1741,1743,1745,1747,1749,1751,1753,1755,1757,1759,1761,1763,1765,1767,1769,1771,1773,1775,1777,1779,1781,1783,1785,1787,1789,1791,1793,1795,1797,1799],[1801,1803,1805,1807,1809,1811,1813,1815,1817,1819,1821,1823,1825,1827,1829,1831,1833,1835,1837,1839,1841,1843,1845,1847,1849,1851,1853,1855,1857,1859,1861,1863,1865,1867,1869,1871,1873,1875,1877,1879,1881,1883,1885,1887,1889,1891,1893,1895,1897,1899],[1901,1903,1905,1907,1909,1911,1913,1915,1917,1919,1921,1923,1925,1927,1929,1931,1933,1935,1937,1939,1941,1943,1945,1947,1949,1951,1953,1955,1957,1959,1961,1963,1965,1967,1969,1971,1973,1975,1977,1979,1981,1983,1985,1987,1989,1991,1993,1995,1997,1999],[2001,2003,2005,2007,2009,2011,2013,2015,2017,2019,2021,2023,2025,2027,2029,2031,2033,2035,2037,2039,2041,2043,2045,2047,2049,2051,2053,2055,2057,2059,2061,2063,2065,2067,2069,2071,2073,2075,2077,2079,2081,2083,2085,2087,2089,2091,2093,2095,2097,2099],[2101,2103,2105,2107,2109,2111,2113,2115,2117,2119,2121,2123,2125,2127,2129,2131,2133,2135,2137,2139,2141,2143,2145,2147,2149,2151,2153,2155,2157,2159,2161,2163,2165,2167,2169,2171,2173,2175,2177,2179,2181,2183,2185,2187,2189,2191,2193,2195,2197,2199],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1109716],[28009212,56398292,14350816,38327240,88225670,29386037,66710259,79627283,95281552,88557665,75249718,41199200,27648730,85799624,2899628,50470597,63402698,57754285,53004700,99882330,93301360,47951815,15621486,60607075,47818352,79744078,97160482,32701435,57066205,33752824,87181276,2543281,7897643,17399760,3410588,37879792,26501880,1751848,56355115,83041740,6799368,54840464,26862561,15107600,70066760,27580128,5217414,61819656,30166963,79212380],[92187444,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0],[91393931,92687716,77110826,2823546,27262485,853391,1462338,71862890,98076327,63567712,16726636,94614400,55226550,25370250,13521552,84113872,20500240,924320,1523205,39880719,22653774,13532814,54030537,53854120,1648912,33705012,44353236,28525527,70151745,41943535,63768790,36475802,94803887,4933040,17570955,46890767,5741232,35920320,946330,49658464,98386988,2473342,13375077,12920518,60128040,17509300,2632395,21996119,56053616,90695296],[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,45979970],[98879820,35132432,18264556,31205995,23075280,13619668,43114165,21553020,76549547,87103042,24881040,36824136,22861553,3826964,64319056,56807973,35054488,89872183,4735196,63597804,7512508,42551248,76187562,63045720,73130571,3469400,41845130,39479322,76755545,42881278,84852693,34962929,49192028,12467004,18397456,66718837,21947266,7852972,60647248,52658596,5585796,68519114,61177929,72276458,3569040,72854320,40614139,34106952,1484565,17456319],[2102,2104,2106,2108,2110,2112,2114,2116,2118,2120,2122,2124,2126,2128,2130,2132,2134,2136,2138,2140,2142,2144,2146,2148,2150,2152,2154,2156,2158,2160,2162,2164,2166,2168,2170,2172,2174,2176,2178,2180,2182,2184,2186,2188,2190,2192,2194,2196,2198,2200],[2002,2004,2006,2008,2010,2012,2014,2016,2018,2020,2022,2024,2026,2028,2030,2032,2034,2036,2038,2040,2042,2044,2046,2048,2050,2052,2054,2056,2058,2060,2062,2064,2066,2068,2070,2072,2074,2076,2078,2080,2082,2084,2086,2088,2090,2092,2094,2096,2098,2100],[1902,1904,1906,1908,1910,1912,1914,1916,1918,1920,1922,1924,1926,1928,1930,1932,1934,1936,1938,1940,1942,1944,1946,1948,1950,1952,1954,1956,1958,1960,1962,1964,1966,1968,1970,1972,1974,1976,1978,1980,1982,1984,1986,1988,1990,1992,1994,1996,1998,2000],[1802,1804,1806,1808,1810,1812,1814,1816,1818,1820,1822,1824,1826,1828,1830,1832,1834,1836,1838,1840,1842,1844,1846,1848,1850,1852,1854,1856,1858,1860,1862,1864,1866,1868,1870,1872,1874,1876,1878,1880,1882,1884,1886,1888,1890,1892,1894,1896,1898,1900],[1702,1704,1706,1708,1710,1712,1714,1716,1718,1720,1722,1724,1726,1728,1730,1732,1734,1736,1738,1740,1742,1744,1746,1748,1750,1752,1754,1756,1758,1760,1762,1764,1766,1768,1770,1772,1774,1776,1778,1780,1782,1784,1786,1788,1790,1792,1794,1796,1798,1800],[1602,1604,1606,1608,1610,1612,1614,1616,1618,1620,1622,1624,1626,1628,1630,1632,1634,1636,1638,1640,1642,1644,1646,1648,1650,1652,1654,1656,1658,1660,1662,1664,1666,1668,1670,1672,1674,1676,1678,1680,1682,1684,1686,1688,1690,1692,1694,1696,1698,1700],[1502,1504,1506,1508,1510,1512,1514,1516,1518,1520,1522,1524,1526,1528,1530,1532,1534,1536,1538,1540,1542,1544,1546,1548,1550,1552,1554,1556,1558,1560,1562,1564,1566,1568,1570,1572,1574,1576,1578,1580,1582,1584,1586,1588,1590,1592,1594,1596,1598,1600],[1402,1404,1406,1408,1410,1412,1414,1416,1418,1420,1422,1424,1426,1428,1430,1432,1434,1436,1438,1440,1442,1444,1446,1448,1450,1452,1454,1456,1458,1460,1462,1464,1466,1468,1470,1472,1474,1476,1478,1480,1482,1484,1486,1488,1490,1492,1494,1496,1498,1500],[1302,1304,1306,1308,1310,1312,1314,1316,1318,1320,1322,1324,1326,1328,1330,1332,1334,1336,1338,1340,1342,1344,1346,1348,1350,1352,1354,1356,1358,1360,1362,1364,1366,1368,1370,1372,1374,1376,1378,1380,1382,1384,1386,1388,1390,1392,1394,1396,1398,1400],[1202,1204,1206,1208,1210,1212,1214,1216,1218,1220,1222,1224,1226,1228,1230,1232,1234,1236,1238,1240,1242,1244,1246,1248,1250,1252,1254,1256,1258,1260,1262,1264,1266,1268,1270,1272,1274,1276,1278,1280,1282,1284,1286,1288,1290,1292,1294,1296,1298,1300],[1102,1104,1106,1108,1110,1112,1114,1116,1118,1120,1122,1124,1126,1128,1130,1132,1134,1136,1138,1140,1142,1144,1146,1148,1150,1152,1154,1156,1158,1160,1162,1164,1166,1168,1170,1172,1174,1176,1178,1180,1182,1184,1186,1188,1190,1192,1194,1196,1198,1200],[1002,1004,1006,1008,1010,1012,1014,1016,1018,1020,1022,1024,1026,1028,1030,1032,1034,1036,1038,1040,1042,1044,1046,1048,1050,1052,1054,1056,1058,1060,1062,1064,1066,1068,1070,1072,1074,1076,1078,1080,1082,1084,1086,1088,1090,1092,1094,1096,1098,1100],[902,904,906,908,910,912,914,916,918,920,922,924,926,928,930,932,934,936,938,940,942,944,946,948,950,952,954,956,958,960,962,964,966,968,970,972,974,976,978,980,982,984,986,988,990,992,994,996,998,1000],[802,804,806,808,810,812,814,816,818,820,822,824,826,828,830,832,834,836,838,840,842,844,846,848,850,852,854,856,858,860,862,864,866,868,870,872,874,876,878,880,882,884,886,888,890,892,894,896,898,900],[702,704,706,708,710,712,714,716,718,720,722,724,726,728,730,732,734,736,738,740,742,744,746,748,750,752,754,756,758,760,762,764,766,768,770,772,774,776,778,780,782,784,786,788,790,792,794,796,798,800],[602,604,606,608,610,612,614,616,618,620,622,624,626,628,630,632,634,636,638,640,642,644,646,648,650,652,654,656,658,660,662,664,666,668,670,672,674,676,678,680,682,684,686,688,690,692,694,696,698,700],[502,504,506,508,510,512,514,516,518,520,522,524,526,528,530,532,534,536,538,540,542,544,546,548,550,552,554,556,558,560,562,564,566,568,570,572,574,576,578,580,582,584,586,588,590,592,594,596,598,600],[402,404,406,408,410,412,414,416,418,420,422,424,426,428,430,432,434,436,438,440,442,444,446,448,450,452,454,456,458,460,462,464,466,468,470,472,474,476,478,480,482,484,486,488,490,492,494,496,498,500],[302,304,306,308,310,312,314,316,318,320,322,324,326,328,330,332,334,336,338,340,342,344,346,348,350,352,354,356,358,360,362,364,366,368,370,372,374,376,378,380,382,384,386,388,390,392,394,396,398,400],[202,204,206,208,210,212,214,216,218,220,222,224,226,228,230,232,234,236,238,240,242,244,246,248,250,252,254,256,258,260,262,264,266,268,270,272,274,276,278,280,282,284,286,288,290,292,294,296,298,300],[102,104,106,108,110,112,114,116,118,120,122,124,126,128,130,132,134,136,138,140,142,144,146,148,150,152,154,156,158,160,162,164,166,168,170,172,174,176,178,180,182,184,186,188,190,192,194,196,198,200],[2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100]]))
# print(time.time() - t0)
# # print(f([[49131,27484,37079,5112,82512,77522,0,0,84740,46730,42986,25440,90350,97211,55002,0,0,2213,72085,0,36010,27828,29392,3048,52147,25009,16038,60927,76634,60050,59564,86787,13469,0,13521,73690,88332,73069,50836],[39465,15069,0,14196,26313,13307,85182,46131,94818,67696,65746,11613,20200,4453,37454,2306,37090,99459,2053,0,5612,77130,17718,19870,19971,58239,41199,21584,69691,41963,53805,81773,38838,50612,32089,60095,70997,53700,83832],[65872,99179,467,48443,73039,97051,17035,86315,63848,17689,37535,20831,51383,96663,97898,71217,80606,42209,69262,86849,0,84531,63092,24168,0,42882,33301,30283,54216,80343,8437,7247,68805,28948,0,53850,62034,33203,73499],[43189,35233,36860,78878,94155,54711,62170,42727,28309,88408,79195,0,83939,45671,55250,84054,52656,24650,47924,47339,0,75272,65385,63344,0,78515,36242,43408,98376,90981,38763,29668,97659,50396,0,53281,95161,16347,47561],[47045,23815,55056,99846,83840,9275,57731,36457,91239,8547,15021,41135,90046,75909,96464,39377,80514,8031,51794,56326,12264,19566,0,50726,13829,3055,12837,20362,45072,38821,1825,1542,15518,77914,94237,24912,23710,0,61137],[23329,58600,55093,75794,45994,44073,21902,59620,67068,83634,4141,90863,0,39854,41813,2596,32510,72826,39767,40644,71762,82641,62187,96954,55151,80354,49069,83870,56915,62867,19441,41487,43067,75182,43988,16488,5054,0,49238],[40854,50136,21930,63014,50657,95315,35876,67562,27367,60643,28017,52960,10048,0,78676,85682,76821,3684,10838,96789,35705,47200,4228,13125,65058,70194,58889,49511,84746,74874,19855,0,99663,41826,90705,74630,14258,68986,131],[52683,80656,24345,1680,68513,0,23764,84910,15319,35388,38238,78543,0,38211,35371,6417,77490,43196,4943,0,27547,96237,45430,22246,27127,64973,0,0,21948,91410,0,53708,0,57138,82476,41911,67543,42140,91808],[91941,35006,29446,34062,61640,28807,4363,51400,13534,41914,87400,12872,95381,0,34685,69692,31688,32842,42354,1813,23320,32444,72251,89754,53993,0,822,46234,86206,70962,86198,27503,95051,66114,73187,0,82682,14456,20830],[12249,0,0,55889,11365,41624,0,4215,63798,67495,22793,19327,77569,8774,55994,6320,83574,99686,885,30672,0,8819,0,4265,0,70149,43594,98724,93483,82402,4432,79239,63297,0,58188,7079,65479,35447,63466],[21847,65491,68272,0,663,20796,62467,40118,59941,66992,10893,33034,85655,39688,22828,55404,13980,35702,19030,80244,91075,9387,64581,48878,34075,83686,19268,93758,36732,85159,1124,41075,47732,86234,85918,45543,32111,77764,48744],[8008,66194,85641,42438,25432,21965,0,68181,44609,26281,7606,29076,10563,29167,18823,25851,9878,77495,92039,70416,1348,71483,62713,74997,84995,37174,84622,64708,21574,96738,14433,6212,26799,73632,16293,13533,82062,68702,42245],[79251,32544,79754,11444,62438,29036,41886,0,65107,98899,23335,42108,71522,0,79018,35499,81950,0,54911,21462,77637,6835,78075,50685,71982,5262,60986,62383,4940,30623,82421,5922,79972,18387,6031,50119,68258,0,79801],[0,12463,0,73312,4847,67163,4246,0,33576,21727,66271,72451,7572,13397,60106,59091,39365,87892,12211,0,78987,57580,38401,8432,7588,16640,17926,27346,9912,65881,82424,93915,0,50568,95077,12215,25729,9781,66889],[22393,36549,32702,62908,71625,51196,0,16883,81389,89862,28316,48135,46900,0,0,94458,82102,74435,89518,42328,23592,57626,3293,51438,37894,9891,6333,11222,26767,87178,29772,0,0,2939,26011,23040,75793,7228,91819],[25619,75288,84718,14153,46269,12231,53129,95581,16602,2704,54943,6962,28044,0,61406,7230,89127,51270,1168,91263,12625,9242,31887,88669,6977,12044,79560,58495,71034,14291,52043,12103,50830,55629,96744,0,0,91897,81493],[35769,18813,97316,34450,4551,40919,11449,14664,0,5528,0,0,72926,16525,0,43526,46541,7931,59160,12393,24689,2861,86051,15351,0,6664,13528,19055,46471,1868,67815,2214,0,39527,3785,57426,32036,68827,16435],[3446,79885,0,94895,19996,35833,73596,37384,0,26218,90263,0,39006,86797,0,0,14016,772,0,54857,6770,14940,36121,58279,67144,24001,57628,22672,0,75027,15357,34195,98889,26897,0,38493,96431,42998,82708],[64920,16206,36974,88238,79205,75343,20743,60634,35735,49609,0,57011,75844,56129,14660,29885,19487,79572,33335,35631,71914,84691,82362,7399,210,5547,83382,69063,66146,0,75517,97090,0,86944,39497,29290,65975,4147,12569],[1704,76913,8662,0,47427,24711,96405,62473,52811,20813,74190,0,7689,63281,57038,6180,16278,95357,0,18561,58682,30667,32524,73001,76305,37695,14384,26340,71350,94917,18699,99486,14854,12236,27441,27664,76108,12161,45550],[87214,34550,44850,2926,24243,85303,59588,17869,75203,3919,2303,29816,58055,22162,2979,15600,86287,21267,94195,55338,26077,47718,60117,31931,23808,22491,7724,64941,47005,95932,79791,28038,29046,59408,57810,69723,20069,79918,29738],[60175,20438,0,0,89228,81820,43766,14559,68394,70976,2699,29371,18920,77261,42989,55362,3697,83830,87612,19486,41994,96207,6649,12472,58473,0,98752,35978,88204,38538,0,3345,79199,0,76391,20315,53814,19936,23801],[41789,70658,0,33205,11175,30180,69081,10953,32509,71050,78984,21745,77920,0,96710,0,90077,6329,82257,82710,89404,31033,94424,49163,0,91301,40438,63564,17854,0,0,35761,63331,48897,0,25001,17845,66619,59479],[0,24662,80269,81056,59862,70814,30475,51987,40917,16492,7998,99397,24850,7770,28721,48459,93081,54687,95194,26864,2856,0,75525,31798,83660,16404,39177,0,277,87586,5117,17703,46413,24269,0,15099,4318,93360,13227],[98607,95857,40815,95516,83898,27206,48324,73196,7649,86187,12098,17187,14062,4891,51238,91404,1621,40464,38104,29224,2148,32157,34879,36490,0,59118,35201,34332,40798,79744,0,34193,19510,4815,3382,11211,19655,57005,64644],[0,11829,74727,45214,95455,47598,74782,92656,38675,60461,0,72169,21313,86178,73353,77631,52335,32293,86500,9514,5463,81500,50471,67726,54815,95407,48171,52509,85049,0,83863,92145,43426,0,99597,18925,75135,5685,6805],[0,41682,55669,28951,16424,43118,88778,82681,99032,81999,30218,25759,80308,0,0,70594,40799,92309,84988,24664,29378,36290,0,0,58442,95993,80946,10604,0,18165,23476,51631,17010,46086,0,0,62321,91326,93106],[26378,24575,9803,90465,68117,8468,98790,84462,37628,52903,25648,41777,278,50698,65690,38919,3276,79786,30591,44235,2407,31725,27071,17715,51021,61353,0,24111,56056,18855,26072,92245,89894,12949,16351,84202,77044,0,99990],[90076,48527,53368,23944,45532,91511,11443,41597,58064,50564,56806,23028,58583,56935,44929,53813,28431,47280,29410,41210,77298,42226,27074,0,39539,21932,0,52567,7108,33232,24184,13236,0,0,25466,73218,11657,43112,656],[1253,30528,60620,24811,88617,34227,12035,18663,97618,0,16107,58666,87883,64538,68908,97721,94800,0,4249,0,0,97280,77953,0,99107,0,78893,73572,89549,74006,73331,93971,27028,66358,34084,50299,42578,99191,1366],[85032,54000,91316,70320,13489,0,21781,37603,855,69666,6782,66851,3358,65603,77183,14255,38868,0,32815,10640,56395,50506,11531,56483,95195,38273,0,53212,82739,0,0,547,54762,49677,7978,97529,52362,9306,42584],[12588,63359,69215,74356,40077,76268,408,7357,93185,0,99796,70845,56381,53125,27014,24078,12190,48969,0,12993,47279,53089,33444,92316,0,28368,9444,44230,84869,81200,37598,12937,29478,0,18032,85880,51411,44686,42892],[75407,90307,51085,66615,4272,31921,56566,35335,44493,56287,40280,39374,91342,97186,33063,71538,67105,37340,25101,72348,79604,67943,9419,22519,83119,10361,16014,13772,66866,7006,93143,13644,39355,49995,0,37914,40414,52658,66075],[96501,4536,27049,71257,99939,72003,41187,0,71708,0,31927,46175,5786,25284,55934,30621,20398,58858,27908,75313,28153,39461,12738,32988,36889,0,8710,93276,89201,0,57064,17014,38713,56466,15129,56629,53188,32312,90690],[93787,98624,10749,61088,54334,83364,75076,73492,9591,71987,43121,86762,80533,15578,75153,6338,33045,53223,14612,72431,0,79584,23850,51949,41435,36292,51229,12413,30900,44498,83338,96630,14976,62268,66175,34813,71567,92411,30576],[0,0,51099,58582,75410,13209,14158,88419,93095,22084,22289,62741,60977,83995,66022,2662,60226,18580,92927,70304,32223,42908,45573,86484,50297,77245,37749,25319,76662,23878,53596,87794,89570,55524,84550,63392,16446,87690,34646],[12456,4405,80575,44852,50584,49364,0,84957,1985,70009,22125,68617,31362,391,0,91605,74932,10619,49715,97363,40335,16989,34273,45641,46955,77834,72261,45033,18653,49269,47207,60528,9277,99860,37141,86874,22226,78877,51913],[61926,98641,7067,43340,59231,37116,20874,75887,20614,0,88117,49253,48432,47115,25967,77196,0,39784,73183,20235,37301,55120,38192,61495,20388,128,2108,4334,78037,83815,91425,66404,0,0,60406,55138,89742,86413,30899],[0,0,16539,62770,98148,75492,42687,77792,3022,80207,1312,69581,25694,0,0,68940,96047,10493,4759,77314,55689,42267,22502,15542,73211,8228,93749,32422,2477,24518,62996,30948,18755,96545,7625,40181,59890,77060,92009]]))



# """
# # WA case
# print(f([[110,2321,3278,8282,227,2736,1545,0,8538,899],[395,8253,8986,9589,6700,5707,0,0,350,1667],[244,6561,4748,4069,1267,4109,0,3209,1101,7797],[6718,7970,0,7873,5902,4079,4619,262,0,5337]]))

#   110  2321  3278  8282   227  2736  1545     0  8538   899

#   395  8253  8986  9589  6700  5707     0     0   350  1667

#   244  6561  4748  4069  1267  4109     0  3209  1101  7797

#  6718  7970     0  7873  5902  4079  4619   262     0  5337

# 1 0 395
# 0 0 110
# 0 1 2321
# 0 2 3278
# 0 3 8282
# 0 4 227
# 0 5 2736
# 0 6 1545
# 1 1 8253
# 1 2 8986
# 1 3 9589
# 1 4 6700
# 1 5 5707
# 2 0 244
# 2 1 6561
# 2 2 4748
# 2 3 4069
# 2 4 1267
# 2 5 4109
# 3 0 6718
# 3 1 7970
# 3 3 7873
# 3 4 5902
# 3 5 4079
# 3 6 4619
# 3 7 262
# 2 7 3209
# 2 8 1101
# 1 8 350
# 0 8 8538
# 0 9 899
#     1     2     3     4     5     6     7    -1    15    16

#     0     1     4     5     6     7    -1    -1    14    15

#     1     2     5     6     7     8    -1    12    13    14

#     2     3    -1     7     8     9    10    11    -1    -1

# 16
# """


# from typing import List, Tuple
# from functools import lru_cache
# from collections import defaultdict

# def f1():
#     def f(self, arr: List[Tuple[int, int]]):
#         d = defaultdict(int)
#         for a, b in arr:
#             d[a] = max(b, d[a])
#         arr = sorted(d.items())  # merge range which have same interval start, then sort
        
#         RANGE = Tuple[int, int]

#         res = 0
#         a, b = arr[0]
#         for a1, b1 in arr[1:]:
#             pass

from collections import defaultdict, deque
from typing import List, Optional
from functools import lru_cache
# Definition for a binary tree node.
class TreeNode:
    def __init__(self, val=0, left=None, right=None):
        self.val = val
        self.left = left
        self.right = right
    
    def __repr__(self) -> str:
        return str(self)

    def __str__(self) -> str:
        return f"<Node: {self.val}>"

class Solution:
    def minCameraCover(self, root: Optional[TreeNode]) -> int:
        pass

def f():
    def f1(root: TreeNode) -> int:
        def dfs(node: TreeNode, paint: bool, painted: set):
            if paint:
                painted.add(node)
            if node.left:
                dfs(node.left, not paint, painted)
            if node.right:
                dfs(node.right, not paint, painted)

        painted = set()
        dfs(root, False, painted)
        n1 = max(1, len(painted))
        painted = set()
        dfs(root, True, painted)
        n2 = max(1, len(painted))
        return min(n1, n2)
